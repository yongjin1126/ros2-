#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
os.environ["QT_LOGGING_RULES"] = "*.debug=false;*.info=false;qt.qpa.*=false"

from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QGridLayout,
    QPushButton, QGroupBox, QTextEdit, QLabel
)
from PyQt6.QtGui import QPalette, QColor, QImage, QPixmap
from PyQt6.QtCore import Qt, QTimer, qInstallMessageHandler, QObject, pyqtSignal
qInstallMessageHandler(lambda *args: None)

import sys
from datetime import datetime
import math
import urllib.request
import threading, time
import socket
import cv2
import numpy as np
import logging
import subprocess, json, base64, select

# ===== ROS2 =====
import rclpy
from rclpy.node import Node
from rclpy.qos import QoSPresetProfiles
from std_msgs.msg import String, Bool, Int32
from geometry_msgs.msg import PoseStamped
from sensor_msgs.msg import Image
from cv_bridge import CvBridge

# ===== 비디오/위치 토픽 설정(절대 변경 금지) =====
IMAGE_TOPICS = {
    "Global":   "/marker/debug_image",
    "Pinky-1":  "http://192.168.247.64:9817/video_feed",
    "Pinky-2":  "http://192.168.247.101:9818/video_feed",
    "Pinky-3":  "http://192.168.247.178:9819/video_feed",
}
POSE_TOPICS = {
    "Pinky-1": "pinky1/marker_map/ID25",
    "Pinky-2": "pinky2/marker_map/ID26",
    "Pinky-3": "pinky3/marker_map/ID27",
}
CELL_W, CELL_H = 640, 360

JETCOBOT_STREAM_URL = "http://192.168.247.164:9816/video_feed"
UDP_PORT = 9999

# ===== 얼굴인식 파라미터(환경변수로 조정) =====
FACE_KNOWN_DIR   = os.getenv("KNOWN_FACES_DIR", "/home/known_faces")
FACE_EVERY_N     = int(os.getenv("FACE_EVERY_N", "4"))
FACE_TOLERANCE   = float(os.getenv("FACE_TOLERANCE", "0.5"))
FACE_SCALE       = float(os.getenv("FACE_SCALE", "0.5"))

# ── 경로 유틸 ─────────────────────────────────────────────────────────
def _resolve_known_dir_hint(path_hint: str) -> str:
    if os.path.isabs(path_hint):
        return path_hint
    if path_hint.startswith("~"):
        return os.path.expanduser(path_hint)
    if path_hint.startswith("home/"):
        return "/" + path_hint
    return path_hint

def _ensure_known_dir_writable(path: str) -> str:
    try:
        os.makedirs(path, exist_ok=True)
        return path
    except PermissionError:
        fallback = os.path.expanduser("~/known_faces")
        try:
            os.makedirs(fallback, exist_ok=True)
        except Exception:
            pass
        return fallback

# ───────────────────────────────────────────────────────────────────────
# 저지연 MJPEG 리더
# ───────────────────────────────────────────────────────────────────────
class MjpegReader:
    def __init__(self, url: str, on_frame_bytes):
        self.url = url
        self.on_frame_bytes = on_frame_bytes
        self._buf = bytearray()
        self._stop = False
        self._thr = threading.Thread(target=self._run, daemon=True)
        self._thr.start()

    def stop(self):
        self._stop = True

    def _run(self):
        conn = None
        while not self._stop:
            try:
                req = urllib.request.Request(self.url, headers={'User-Agent': 'Mozilla/5.0'})
                conn = urllib.request.urlopen(req, timeout=3.0)
                while not self._stop:
                    chunk = conn.read(65536)
                    if not chunk:
                        break
                    self._buf += chunk
                    while True:
                        soi = self._buf.find(b'\xff\xd8')
                        if soi < 0:
                            if len(self._buf) > 2_000_000:
                                del self._buf[:-2]
                            break
                        eoi = self._buf.find(b'\xff\xd9', soi + 2)
                        if eoi < 0:
                            if soi > 1_000_000:
                                del self._buf[:soi]
                            break
                        jpg = bytes(self._buf[soi:eoi+2])
                        del self._buf[:eoi+2]
                        self.on_frame_bytes(jpg)
                    if len(self._buf) > 3_000_000:
                        self._buf = self._buf[-1_000_000:]
            except Exception:
                time.sleep(0.3)
            finally:
                try:
                    if conn: conn.close()
                except Exception:
                    pass
                conn = None

# ── ROS 브리지 ─────────────────────────────────────────────────────────
class RosBridge(Node):
    def __init__(self, image_topics: dict[str, str], pose_topics: dict[str, str]):
        super().__init__('delivery_robot_gui')
        self.bridge = CvBridge()
        self.latest_qimages: dict[str, QImage | None] = {name: None for name in image_topics.keys()}
        self.latest_poses: dict[str, tuple[float, float, float] | None] = {name: None for name in pose_topics.keys()}

        self.image_subs = {}
        for name, topic in image_topics.items():
            if isinstance(topic, str) and topic.startswith('/'):
                self.image_subs[name] = self.create_subscription(
                    Image, topic, self._make_img_cb(name),
                    QoSPresetProfiles.SENSOR_DATA.value
                )

        self.pose_subs = {}
        for name, topic in pose_topics.items():
            self.pose_subs[name] = self.create_subscription(
                PoseStamped, topic, self._make_pose_cb(name), 10
            )

        self.pub_log = self.create_publisher(String, '/gui/log', 10)
        self.pub_p1_kitchen = self.create_publisher(Bool, '/pinky1/go_to_kitchen', 10)
        self.pub_p1_serving = self.create_publisher(Bool, '/pinky1/go_to_serving', 10)
        self.pub_p1_charge  = self.create_publisher(Bool, '/pinky1/go_to_charge', 10)
        self.pub_p1_room    = self.create_publisher(Bool, '/pinky1/go_to_room', 10)
        self.pub_p1_recall  = self.create_publisher(Bool, '/pinky1/go_to_recall', 10)
        self.pub_p1_return  = self.create_publisher(Bool, '/pinky1/go_to_return', 10)
        self.pub_p1_stop    = self.create_publisher(Bool, '/pinky1/stop', 10)

        self.pub_p2_kitchen = self.create_publisher(Bool, '/pinky2/go_to_kitchen', 10)
        self.pub_p2_serving = self.create_publisher(Bool, '/pinky2/go_to_serving', 10)
        self.pub_p2_charge  = self.create_publisher(Bool, '/pinky2/go_to_charge', 10)
        self.pub_p2_room    = self.create_publisher(Bool, '/pinky2/go_to_room', 10)
        self.pub_p2_recall  = self.create_publisher(Bool, '/pinky2/go_to_recall', 10)
        self.pub_p2_return  = self.create_publisher(Bool, '/pinky2/go_to_return', 10)
        self.pub_p2_stop    = self.create_publisher(Bool, '/pinky2/stop', 10)

        self.pub_p3_kitchen = self.create_publisher(Bool, '/pinky3/go_to_kitchen', 10)
        self.pub_p3_serving = self.create_publisher(Bool, '/pinky3/go_to_serving', 10)
        self.pub_p3_charge  = self.create_publisher(Bool, '/pinky3/go_to_charge', 10)
        self.pub_p3_room    = self.create_publisher(Bool, '/pinky3/go_to_room', 10)
        self.pub_p3_recall  = self.create_publisher(Bool, '/pinky3/go_to_recall', 10)
        self.pub_p3_return  = self.create_publisher(Bool, '/pinky3/go_to_return', 10)
        self.pub_p3_stop    = self.create_publisher(Bool, '/pinky3/stop', 10)

        self.gui_append_log = None
        self.gui_append_alert = None
        self.gui_set_pose_text = None
        self.sub_coord_log = self.create_subscription(String, '/coordinator/gui_log', self._cb_coord_log, 10)

    def _make_img_cb(self, name: str):
        def _cb(msg: Image):
            try:
                cv_bgr = self.bridge.imgmsg_to_cv2(msg, desired_encoding='bgr8')
                cv_rgb = cv_bgr[:, :, ::-1]
                h, w = cv_rgb.shape[:2]
                bytes_per_line = w * 3
                qimg = QImage(cv_rgb.tobytes(), w, h, bytes_per_line, QImage.Format.Format_RGB888).copy()
                self.latest_qimages[name] = qimg
            except Exception as e:
                self._log_gui(f"[{name}] cv_bridge 변환 실패: {e}")
        return _cb

    def _make_pose_cb(self, name: str):
        def _cb(msg: PoseStamped):
            x = msg.pose.position.x
            y = msg.pose.position.y
            z = msg.pose.orientation.z
            w = msg.pose.orientation.w
            yaw = 2.0 * math.atan2(z, w)
            yaw_deg = math.degrees(yaw)
            self.latest_poses[name] = (x, y, yaw_deg)
            if self.gui_set_pose_text:
                text = " | ".join(
                    f"{n}: x={p[0]:.2f}, y={p[1]:.2f}, yaw={p[2]:.1f}°"
                    for n, p in self.latest_poses.items() if p is not None
                )
                self.gui_set_pose_text(text if text else "현재 위치: -")
        return _cb

    def set_callbacks(self, append_log, append_alert, set_pose_text, append_coord_log):
        self.gui_append_log = append_log
        self.gui_append_alert = append_alert
        self.gui_set_pose_text = set_pose_text
        self.gui_append_coord_log = append_coord_log

    def _log_gui(self, text: str):
        if self.gui_append_log:
            self.gui_append_log(text)
        self.pub_log.publish(String(data=text))

    def _alert_gui(self, text: str):
        if self.gui_append_alert:
            self.gui_append_alert(text)

    def _send_goal(self, robot: int, goal_name: str):
        table = {
            1: {"kitchen": self.pub_p1_kitchen, "serving": self.pub_p1_serving, "charge": self.pub_p1_charge,
                "room": self.pub_p1_room, "recall": self.pub_p1_recall, "return": self.pub_p1_return},
            2: {"kitchen": self.pub_p2_kitchen, "serving": self.pub_p2_serving, "charge": self.pub_p2_charge,
                "room": self.pub_p2_room, "recall": self.pub_p2_recall, "return": self.pub_p2_return},
            3: {"kitchen": self.pub_p3_kitchen, "serving": self.pub_p3_serving, "charge": self.pub_p3_charge,
                "room": self.pub_p3_room, "recall": self.pub_p3_recall, "return": self.pub_p3_return},
        }
        pub = table.get(robot, {}).get(goal_name)
        if pub is None:
            self._log_gui(f"[Pinky{robot}] 알 수 없는 목적지: {goal_name}")
            return
        pub.publish(Bool(data=True))
        self._log_gui(f"[Pinky{robot}] /pinky{robot}/go_to_{goal_name} = True  (bridge→/go_to_{goal_name})")

    def _send_stop(self, robot: int):
        pub = {1: self.pub_p1_stop, 2: self.pub_p2_stop, 3: self.pub_p3_stop}.get(robot)
        if pub is None:
            self._log_gui(f"[Pinky{robot}] STOP 퍼블리셔 없음")
            return
        pub.publish(Bool(data=True))
        self._log_gui(f"[Pinky{robot}] /pinky{robot}/stop = True  (bridge→/stop)")

    def _cb_coord_log(self, msg: String):
        if hasattr(self, "gui_append_coord_log") and self.gui_append_coord_log:
            self.gui_append_coord_log(msg.data)

    def send_p1_goal(self, goal_name: str): self._send_goal(1, goal_name)
    def send_p2_goal(self, goal_name: str): self._send_goal(2, goal_name)
    def send_p3_goal(self, goal_name: str): self._send_goal(3, goal_name)
    def send_p1_stop(self): self._send_stop(1)
    def send_p2_stop(self): self._send_stop(2)
    def send_p3_stop(self): self._send_stop(3)

# ── UDP 수신(알림 패널로 전달) ─────────────────────────────────────────
class UdpNotifyReceiver(QObject):
    received = pyqtSignal(str)
    def __init__(self, port=UDP_PORT, parent=None):
        super().__init__(parent)
        self._sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self._sock.bind(("", port))
        self._thr = threading.Thread(target=self._run, daemon=True)
    def start(self):
        self._thr.start()
    def _run(self):
        while True:
            try:
                data, addr = self._sock.recvfrom(8192)
                msg = data.decode("utf-8", "ignore")
                self.received.emit(msg)
            except Exception:
                continue

# ── 메인 GUI ────────────────────────────────────────────────────────────
class GUI(QMainWindow):
    def __init__(self, ros: RosBridge, image_topics: dict[str, str]):
        super().__init__()
        self.ros = ros
        self.image_names = list(image_topics.keys())
        self.image_topics = image_topics
        self.setWindowTitle("요양원 식사 배송 로봇 제어 (ROS2 토픽 전용)")
        self.showMaximized()

        # 테마
        palette = QPalette()
        palette.setColor(QPalette.ColorRole.Window, QColor("#FFF2CC"))
        palette.setColor(QPalette.ColorRole.WindowText, QColor("#647687"))
        palette.setColor(QPalette.ColorRole.Button, QColor("#E1D5E7"))
        palette.setColor(QPalette.ColorRole.ButtonText, QColor("#647687"))
        palette.setColor(QPalette.ColorRole.Base, QColor("#FFF2CC"))
        palette.setColor(QPalette.ColorRole.Text, QColor("#647687"))
        self.setPalette(palette)

        main_widget = QWidget()
        self.setCentralWidget(main_widget)
        main_layout = QHBoxLayout(main_widget)
        main_layout.setContentsMargins(15, 15, 15, 15)
        main_layout.setSpacing(15)

        # 좌측(비디오/포즈)
        left_widget = QWidget()
        left_widget.setStyleSheet("background-color: #BAC8D3; border-radius: 10px; padding: 15px; border: 2px solid #647687;")
        left_layout = QGridLayout(left_widget)
        left_layout.setSpacing(8)

        pose_group = QGroupBox("현재 위치 (ID25~27)")
        pose_group.setStyleSheet("color: #647687; border: 2px solid #647687; border-radius: 10px;")
        pose_layout = QVBoxLayout(pose_group)
        self.pose_p1 = QLabel("Pinky-1: 대기 중")
        self.pose_p2 = QLabel("Pinky-2: 대기 중")
        self.pose_p3 = QLabel("Pinky-3: 대기 중")
        for label in (self.pose_p1, self.pose_p2, self.pose_p3):
            label.setStyleSheet("color: #647687; font-size: 14px;")
            pose_layout.addWidget(label)
        left_layout.addWidget(pose_group, 0, 0, 1, 2)

        jet_group = QGroupBox("JetCobot MJPEG 스트림")
        jet_group.setStyleSheet("color: #647687; border: 2px solid #647687; border-radius: 10px;")
        jet_layout = QVBoxLayout(jet_group)
        self.image_jetcobot = QLabel("JetCobot: 대기 중…")
        self.image_jetcobot.setStyleSheet("background-color: #FFF2CC; border: 2px solid #647687; border-radius: 6px; color: #647687;")
        self.image_jetcobot.setFixedSize(CELL_W, CELL_H)
        self.image_jetcobot.setAlignment(Qt.AlignmentFlag.AlignCenter)
        jet_layout.addWidget(self.image_jetcobot)
        left_layout.addWidget(jet_group, 2, 1)

        self.video_labels = {}
        for i, name in enumerate(self.image_names):
            group = QGroupBox(f"{name} ({self.image_topics[name]})")
            group.setStyleSheet("color: #647687; border: 2px solid #647687; border-radius: 8px; font-size: 14px;")
            group_layout = QVBoxLayout(group)
            label = QLabel(f"{name} 대기 중…")
            label.setStyleSheet("background-color: #FFF2CC; border: 2px solid #647687; border-radius: 6px; color: #647687;")
            label.setFixedSize(CELL_W, CELL_H)
            label.setAlignment(Qt.AlignmentFlag.AlignCenter)
            group_layout.addWidget(label)
            row, col = divmod(i, 2)
            left_layout.addWidget(group, row + 1, col)
            self.video_labels[name] = label

        # 우측(알림/컨트롤/로그)
        right_widget = QWidget()
        right_widget.setStyleSheet("background-color: #BAC8D3; border-radius: 10px; padding: 15px; border: 2px solid #647687;")
        right_layout = QVBoxLayout(right_widget)
        right_layout.setSpacing(15)

        alert_group = QGroupBox("알림 (UDP)")
        alert_group.setStyleSheet("color: #647687; border: 2px solid #647687; border-radius: 10px; font-size: 18px;")
        alert_layout = QVBoxLayout(alert_group)
        self.alert_text = QTextEdit()
        self.alert_text.setReadOnly(True)
        self.alert_text.setStyleSheet("background-color: #FFF2CC; border: 2px solid #647687; border-radius: 6px;")
        alert_layout.addWidget(self.alert_text)

        ctrl_group = QGroupBox("로봇 제어 (브릿지 Bool 토픽)")
        ctrl_group.setStyleSheet("color: #647687; border: 2px solid #647687; border-radius: 10px; font-size: 18px;")
        ctrl_layout = QGridLayout(ctrl_group)
        bool_cmds = [
            ("주방", "kitchen"),
            ("배식대", "serving"),
            ("충전", "charge"),
            ("호실", "room"),
            ("리콜", "recall"),
            ("복귀", "return"),
        ]
        base_row = 0
        for i, (label, goal) in enumerate(bool_cmds):
            btn = QPushButton(f"Pinky1: {label}")
            btn.setStyleSheet("background-color: #E1D5E7; border-radius: 6px; padding: 10px; font-size: 16px; border: 1px solid #647687;")
            btn.clicked.connect(lambda _, g=goal: self.ros.send_p1_goal(g))
            ctrl_layout.addWidget(btn, base_row + i, 2)
        btn_p1_stop = QPushButton("Pinky1: STOP")
        btn_p1_stop.setStyleSheet("background-color: #ffdddd; border-radius: 6px; padding: 10px; font-size: 16px; border: 2px solid #aa0000;")
        btn_p1_stop.clicked.connect(lambda _: self.ros.send_p1_stop())
        ctrl_layout.addWidget(btn_p1_stop, base_row + len(bool_cmds), 2)

        for i, (label, goal) in enumerate(bool_cmds):
            btn = QPushButton(f"Pinky2: {label}")
            btn.setStyleSheet("background-color: #E1D5E7; border-radius: 6px; padding: 10px; font-size: 16px; border: 1px solid #647687;")
            btn.clicked.connect(lambda _, g=goal: self.ros.send_p2_goal(g))
            ctrl_layout.addWidget(btn, base_row + i, 3)
        btn_p2_stop = QPushButton("Pinky2: STOP")
        btn_p2_stop.setStyleSheet("background-color: #ffdddd; border-radius: 6px; padding: 10px; font-size: 16px; border: 2px solid #aa0000;")
        btn_p2_stop.clicked.connect(lambda _: self.ros.send_p2_stop())
        ctrl_layout.addWidget(btn_p2_stop, base_row + len(bool_cmds), 3)

        for i, (label, goal) in enumerate(bool_cmds):
            btn = QPushButton(f"Pinky3: {label}")
            btn.setStyleSheet("background-color: #E1D5E7; border-radius: 6px; padding: 10px; font-size: 16px; border: 1px solid #647687;")
            btn.clicked.connect(lambda _, g=goal: self.ros.send_p3_goal(g))
            ctrl_layout.addWidget(btn, base_row + i, 4)
        btn_p3_stop = QPushButton("Pinky3: STOP")
        btn_p3_stop.setStyleSheet("background-color: #ffdddd; border-radius: 6px; padding: 10px; font-size: 16px; border: 2px solid #aa0000;")
        btn_p3_stop.clicked.connect(lambda _: self.ros.send_p3_stop())
        ctrl_layout.addWidget(btn_p3_stop, base_row + len(bool_cmds), 4)

        coordinator_box = QGroupBox("Coordinator 제어")
        coordinator_box.setStyleSheet("color: #647687; border: 2px solid #647687; border-radius: 10px; font-size: 18px;")
        coordinator_layout = QHBoxLayout(coordinator_box)
        coordinator_layout.setSpacing(10)
        coordinator_layout.setContentsMargins(10, 10, 10, 10)
        self.coordinator_pub = self.ros.create_publisher(Int32, '/coordinator/command', 10)
        def add_coord_btn(label: str, cmd: int):
            btn = QPushButton(label)
            btn.setMinimumHeight(45)
            btn.setStyleSheet("background-color: #D5E8D4; border-radius: 6px; padding: 10px; font-size: 16px; border: 1px solid #647687;")
            btn.clicked.connect(lambda _, c=cmd: self.coordinator_pub.publish(Int32(data=c)))
            coordinator_layout.addWidget(btn)
        add_coord_btn("식판 적재", 1)
        add_coord_btn("식판 회수", 2)
        add_coord_btn("일시정지", 3)
        add_coord_btn("초기화", 4)

        log_group = QGroupBox("작동 로그 (/gui/log)")
        log_group.setStyleSheet("color: #647687; border: 2px solid #647687; border-radius: 10px; font-size: 18px;")
        log_layout = QVBoxLayout(log_group)
        self.log_text = QTextEdit()
        self.log_text.setReadOnly(True)
        self.log_text.setStyleSheet("background-color: #FFF2CC; border: 2px solid #647687; border-radius: 6px;")
        log_layout.addWidget(self.log_text)

        coord_log_group = QGroupBox("Coordinator 로그 (/coordinator/gui_log)")
        coord_log_group.setStyleSheet("color: #647687; border: 2px solid #647687; border-radius: 10px; font-size: 18px;")
        coord_log_layout = QVBoxLayout(coord_log_group)
        self.coord_log_text = QTextEdit()
        self.coord_log_text.setReadOnly(True)
        self.coord_log_text.setStyleSheet("background-color: #FFF2CC; border: 2px solid #647687; border-radius: 6px;")
        coord_log_layout.addWidget(self.coord_log_text)

        right_layout.addWidget(alert_group)
        right_layout.addWidget(ctrl_group)
        right_layout.addWidget(coordinator_box)
        right_layout.addWidget(log_group)
        right_layout.addWidget(coord_log_group)
        right_layout.addStretch()

        main_layout.addWidget(left_widget, stretch=1)
        main_layout.addWidget(right_widget, stretch=1)

        # 스트림/이미지 버퍼
        self._mjpeg_last_jpg = {name: None for name in self.image_names}
        self._mjpeg_lock = {name: threading.Lock() for name in self.image_names}
        self._mjpeg_readers = {}
        self._jet_last_jpg = None
        self._jet_lock = threading.Lock()

        # 얼굴인식(워커) 상태
        self._known_faces_dir = None
        self._worker = None
        self._face_inflight = False
        self._face_frame_counter = 0
        self._p3_last_bgr = None

        # HTTP MJPEG
        for name, topic in image_topics.items():
            if isinstance(topic, str) and topic.startswith('http'):
                self._mjpeg_readers[name] = MjpegReader(topic, lambda jpg, n=name: self._on_mjpeg_jpeg(n, jpg))

        # 제트코봇
        self._jet_reader = MjpegReader(JETCOBOT_STREAM_URL, self._on_jet_jpeg)

        # 얼굴 DB 경로 준비 + 워커 시작
        self.load_known_faces()
        self._start_worker()

        # 초기 로그
        self.log_action("GUI 시작. 다중 스트림/위치 구독 활성화; /pinkyN/go_to_*, /pinkyN/stop 퍼블리시 준비 완료")

        # UDP 수신
        self._udp_rx = UdpNotifyReceiver(port=UDP_PORT)
        self._udp_rx.received.connect(self.alert_action)
        self._udp_rx.start()

        # 타이머
        self.timer = QTimer()
        self.timer.timeout.connect(self._on_timer)
        self.timer.start(33)

        # 콜백 연결
        self.ros.set_callbacks(
            append_log=self.log_action,
            append_alert=self.alert_action,
            set_pose_text=self._update_pose_ui,
            append_coord_log=self.append_coord_log
        )

    # ── 얼굴 DB 경로만 준비 (워커가 로드)
    def load_known_faces(self):
        hint = FACE_KNOWN_DIR
        resolved = _resolve_known_dir_hint(hint)
        folder_path = _ensure_known_dir_writable(resolved)
        self._known_faces_dir = folder_path
        if folder_path != resolved:
            self.log_action(f"알려진 얼굴 폴더 권한 부족 → 폴백 사용: {folder_path} (힌트: {hint})")
        else:
            self.log_action(f"알려진 얼굴 스캔: {folder_path}")

    # ── 워커 시작/중지/통신
    def _start_worker(self):
        if self._worker:
            return
        worker_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "face_worker.py")
        self._worker = subprocess.Popen(
            [sys.executable, worker_path],
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.DEVNULL,
            bufsize=0,
            universal_newlines=False
        )
        self._send_worker({
            "cmd": "init",
            "known_dir": self._known_faces_dir,
            "tolerance": FACE_TOLERANCE,
            "scale": FACE_SCALE
        })

    def _stop_worker(self):
        if not self._worker:
            return
        try:
            self._send_worker({"cmd": "quit"})
            try:
                self._worker.wait(timeout=1.0)
            except Exception:
                self._worker.kill()
        except Exception:
            pass
        self._worker = None

    def _send_worker(self, obj: dict):
        if not self._worker or not self._worker.stdin:
            return
        line = (json.dumps(obj, ensure_ascii=False) + "\n").encode("utf-8")
        try:
            self._worker.stdin.write(line)
            self._worker.stdin.flush()
        except Exception:
            pass

    def _poll_worker(self):
        if not self._worker or not self._worker.stdout:
            return
        try:
            r, _, _ = select.select([self._worker.stdout], [], [], 0)
            if not r:
                return
            line = self._worker.stdout.readline()
            if not line:
                return
            msg = json.loads(line.decode("utf-8", "ignore"))
            mtype = msg.get("type")
            if mtype == "init_ok":
                self.log_action(f"총 {msg.get('loaded',0)}개 얼굴 인코딩 로드 완료(서브프로세스)")
            elif mtype == "infer_ok":
                names = msg.get("names", [])
                locs = msg.get("locs", [])
                self._face_inflight = False
                self._on_face_done(locs, names)
            elif mtype == "error":
                self._face_inflight = False
                self.log_action(f"얼굴인식 오류(서브프로세스): {msg.get('msg')}")
        except Exception:
            pass

    # ── MJPEG 콜백들
    def _on_jet_jpeg(self, jpg: bytes):
        with self._jet_lock:
            self._jet_last_jpg = jpg

    def _on_mjpeg_jpeg(self, name: str, jpg: bytes):
        lock = self._mjpeg_lock.get(name)
        if lock:
            with lock:
                self._mjpeg_last_jpg[name] = jpg
        if name == "Pinky-3":
            npbuf = np.frombuffer(jpg, dtype=np.uint8)
            frame_bgr = cv2.imdecode(npbuf, cv2.IMREAD_COLOR)
            if frame_bgr is not None:
                self._p3_last_bgr = frame_bgr
            self._face_frame_counter = (self._face_frame_counter + 1) % max(FACE_EVERY_N, 1)
            if (self._face_frame_counter == 0 and
                not self._face_inflight and
                self._worker is not None and
                self._p3_last_bgr is not None):
                self._face_inflight = True
                try:
                    b64 = base64.b64encode(jpg).decode("ascii")
                    self._send_worker({"cmd":"infer", "jpg_b64": b64})
                except Exception:
                    self._face_inflight = False

    # ── 얼굴인식 결과 반영 (★ 인식=초록, Unknown=빨강)
    def _on_face_done(self, face_locations, names):
        # 알림/STOP 로직
        if "Unknown" in names and len(names) > 0:
            self.alert_action(f"Pinky-3: 미등록 인원 감지 → STOP")
            self.ros.send_p3_stop()
            self.log_action("Pinky-3: 미등록 인원 감지. /pinky3/stop 퍼블리시")
        elif names:
            self.alert_action(f"Pinky-3: 인식됨 → {names}")

        if self._p3_last_bgr is None:
            return
        bgr = self._p3_last_bgr.copy()

        box_thickness = 3
        font_scale = 0.8
        font_thickness = 1

        for (top, right, bottom, left), name in zip(face_locations, names):
            color = (0, 255, 0) if name != "Unknown" else (0, 0, 255)  # 초록/빨강
            cv2.rectangle(bgr, (left, top), (right, bottom), color, box_thickness)
            label_h = 30
            cv2.rectangle(bgr, (left, bottom - label_h), (right, bottom), color, cv2.FILLED)
            cv2.putText(
                bgr, name, (left + 6, bottom - 8),
                cv2.FONT_HERSHEY_DUPLEX, font_scale, (255, 255, 255), font_thickness
            )

        rgb = cv2.cvtColor(bgr, cv2.COLOR_BGR2RGB)
        h, w, ch = rgb.shape
        qimg = QImage(rgb.data, w, h, ch * w, QImage.Format.Format_RGB888).copy()
        pix = QPixmap.fromImage(qimg.scaled(CELL_W, CELL_H, Qt.AspectRatioMode.KeepAspectRatio))
        lbl = self.video_labels.get("Pinky-3")
        if lbl is not None:
            lbl.setPixmap(pix)

    # ── 타이머 루프
    def _on_timer(self):
        rclpy.spin_once(self.ros, timeout_sec=0.0)
        self._poll_worker()

        with self._jet_lock:
            jet_jpg = self._jet_last_jpg
        if jet_jpg:
            img = QImage.fromData(jet_jpg)
            if not img.isNull():
                pix = QPixmap.fromImage(
                    img.scaled(
                        self.image_jetcobot.width(),
                        self.image_jetcobot.height(),
                        Qt.AspectRatioMode.KeepAspectRatio
                    )
                )
                self.image_jetcobot.setPixmap(pix)

        for name, lbl in self.video_labels.items():
            qimg = None
            lock = self._mjpeg_lock.get(name)
            jpg = None
            if lock:
                with lock:
                    jpg = self._mjpeg_last_jpg.get(name)
            if jpg:
                img = QImage.fromData(jpg)
                if not img.isNull():
                    qimg = img
            if qimg is None and self.ros.latest_qimages.get(name) is not None:
                qimg = self.ros.latest_qimages[name]
            if qimg is not None:
                pix = QPixmap.fromImage(qimg.scaled(CELL_W, CELL_H, Qt.AspectRatioMode.KeepAspectRatio))
                lbl.setPixmap(pix)

    # ── 로그/표시 유틸
    def append_coord_log(self, message: str):
        ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.coord_log_text.append(f"[Coordinator] [{ts}] {message}")

    def log_action(self, message: str):
        ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.log_text.append(f"[{ts}] {message}")

    def alert_action(self, message: str):
        ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.alert_text.append(f"[{ts}] {message}")

    def _update_pose_ui(self, _incoming_text: str):
        def fmt(p):
            return f"x={p[0]:.2f}, y={p[1]:.2f}, yaw={p[2]:.1f}°"
        p1 = self.ros.latest_poses.get("Pinky-1")
        p2 = self.ros.latest_poses.get("Pinky-2")
        p3 = self.ros.latest_poses.get("Pinky-3")
        self.pose_p1.setText(f"Pinky-1: {fmt(p1)}" if p1 else "Pinky-1: 대기 중")
        self.pose_p2.setText(f"Pinky-2: {fmt(p2)}" if p2 else "Pinky-2: 대기 중")
        self.pose_p3.setText(f"Pinky-3: {fmt(p3)}" if p3 else "Pinky-3: 대기 중")

    # ── 종료 처리
    def closeEvent(self, event):
        try:
            if hasattr(self, "_mjpeg_readers"):
                for r in self._mjpeg_readers.values():
                    try: r.stop()
                    except Exception: pass
            if hasattr(self, "_jet_reader") and self._jet_reader:
                self._jet_reader.stop()
            self._stop_worker()
            self.ros.destroy_node()
            rclpy.shutdown()
        except Exception:
            pass
        super().closeEvent(event)

# ── 엔트리 포인트 ─────────────────────────────────────────────────────
def main():
    rclpy.init(args=None)
    ros = RosBridge(IMAGE_TOPICS, POSE_TOPICS)
    app = QApplication(sys.argv)
    w = GUI(ros, IMAGE_TOPICS)
    w.show()
    sys.exit(app.exec())

if __name__ == "__main__":
    main()
